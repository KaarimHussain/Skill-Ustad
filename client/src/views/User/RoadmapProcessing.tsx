import { useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { roadmapTemplates } from "@/data/roadmapTemplates";
import AuthService from "@/services/auth.service";
import { Card } from "@/components/ui/card";
import { Info } from "lucide-react";
import { Button } from "@/components/ui/button";
import RoadmapService from "@/services/roadmap.service";

export default function RoadmapProcessing() {
    const location = useLocation();
    const navigate = useNavigate();
    const prompt = location.state?.prompt || "";
    const [error, setError] = useState<string | null>(null);
    const [smallError, setSmallError] = useState<string | null>(null);


    const generateAndSaveRoadmap = async (sessionKey: string) => {

        const isAuthenticated = AuthService.isAuthenticated();
        if (!isAuthenticated) {
            navigate("/login");
            return;
        }

        try {
            const matchingKey = Object.keys(roadmapTemplates).find((key) =>
                prompt.includes(key)
            );

            let nodes: any[] = [];
            let edges: any[] = [];

            if (matchingKey) {
                // Static template match âœ…
                const template = roadmapTemplates[matchingKey];
                nodes = template.nodes;
                edges = template.edges;
            } else {
                // ðŸ§  No match? Use Gemini fallback
                const res = await fetch(`${import.meta.env.VITE_PYTHON_SERVER_URL}/gen-ai/api/generate-roadmap`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ prompt }),
                });

                const aiData = await res.json();
                nodes = aiData.nodes;
                edges = aiData.edges;
            }

            const filledNodes: any[] = [];
            for (const node of nodes) {
                try {
                    const res = await fetch(`${import.meta.env.VITE_PYTHON_SERVER_URL}/gen-ai/api/description`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ label: node.data.label, context: prompt }),
                    });
                    const data = await res.json();
                    filledNodes.push({
                        ...node,
                        data: {
                            ...node.data,
                            description: data.description || "",
                        },
                    });
                } catch {
                    filledNodes.push(node);
                }
            }

            // Getting the Roadmap Difficulty generated by AI
            const difficultyRes = await RoadmapService.getRoadmapDifficulty(filledNodes);

            // Fix the logic: use && instead of || and check if it's NOT one of the valid values
            let finalDifficulty: string;
            if (difficultyRes.toLowerCase() !== "easy" &&
                difficultyRes.toLowerCase() !== "medium" &&
                difficultyRes.toLowerCase() !== "hard") {
                finalDifficulty = "Medium";
                console.log("Invalid difficulty received, defaulting to Medium");
            } else {
                // Capitalize first letter to ensure consistent format
                finalDifficulty = difficultyRes.charAt(0).toUpperCase() + difficultyRes.slice(1).toLowerCase();
                console.log("Final Difficulty: ", finalDifficulty);

            }

            // Getting the current user Id
            const userId = AuthService.getAuthenticatedUserId();

            const roadmap = {
                title: prompt,
                nodes: filledNodes,
                edges,
                createdAt: serverTimestamp(),
                userId: userId,
                visibility: "Public",
                difficulty: finalDifficulty  // Use the processed difficulty directly instead of state
            };

            const docRef = await addDoc(collection(db, "roadmaps"), roadmap);
            // Remove session key after successful roadmap generation
            sessionStorage.removeItem(sessionKey);
            navigate(`/user/roadmap/${docRef.id}`);
        } catch (err: any) {
            console.error("Roadmap gen error:", err);
            setError("Something went wrong while generating your roadmap.");
            setSmallError(err)
            // Remove session key if there's an error to allow retry
            sessionStorage.removeItem(sessionKey);
        }
    };

    useEffect(() => {
        if (!prompt) return;

        // ðŸ‘‡ Unique session key to prevent duplicate generation
        const sessionKey = `roadmap-generated-${prompt}`;

        if (sessionStorage.getItem(sessionKey)) {
            console.log("Duplicate prevention triggered - already generated.");
            return;
        }

        sessionStorage.setItem(sessionKey, "true");
        generateAndSaveRoadmap(sessionKey);

    }, [prompt]);

    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-white">
            {error ? (
                <Card className="w-full max-w-md mx-auto text-center p-8 border border-none outline-0 shadow-none">
                    <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
                        <Info className="w-8 h-8 text-red-600" />
                    </div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-3">{error}</h2>
                    <small className="text-sm text-gray-500">{smallError}</small>
                    <Button
                        onClick={() => navigate("/user/roadmap-gen")}
                        className="px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-300"
                    >
                        Try Again
                    </Button>
                </Card>
            ) : (
                <div className="flex items-center gap-3">
                    <div className="w-6 h-6 border-4 border-indigo-300 border-t-indigo-600 rounded-full animate-spin"></div>
                    <span className="text-lg text-gray-700 font-medium">
                        Generating your roadmap...
                    </span>
                </div>
            )}
        </div>
    );
}
