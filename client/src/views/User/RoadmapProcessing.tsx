import { useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { roadmapTemplates } from "@/data/roadmapTemplates";
import AuthService from "@/services/auth.service";
import { Card } from "@/components/ui/card";
import { AlertCircle, ArrowLeft, RefreshCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import RoadmapService from "@/services/roadmap.service";

interface ErrorState {
    title: string;
    message: string;
    technicalDetails?: string;
}

export default function RoadmapProcessing() {
    const location = useLocation();
    const navigate = useNavigate();
    const prompt = location.state?.prompt || "";
    const [error, setError] = useState<ErrorState | null>(null);
    const [isGenerating, setIsGenerating] = useState(true);

    const generateAndSaveRoadmap = async (sessionKey: string) => {
        const isAuthenticated = AuthService.isAuthenticated();
        if (!isAuthenticated) {
            navigate("/login");
            return;
        }

        try {
            setIsGenerating(true);
            const matchingKey = Object.keys(roadmapTemplates).find((key) =>
                prompt.includes(key)
            );

            let nodes: any[] = [];
            let edges: any[] = [];

            if (matchingKey) {
                // Static template match âœ…
                const template = roadmapTemplates[matchingKey];
                nodes = template.nodes;
                edges = template.edges;
            } else {
                // ðŸ§  No match? Use Gemini fallback
                try {
                    const res = await fetch(`${import.meta.env.VITE_PYTHON_SERVER_URL}/gen-ai/api/generate-roadmap`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ prompt }),
                    });

                    if (!res.ok) {
                        throw new Error(`AI generation failed with status ${res.status}`);
                    }

                    const aiData = await res.json();

                    if (!aiData.nodes || !aiData.edges) {
                        throw new Error("Invalid response structure from AI service");
                    }

                    nodes = aiData.nodes;
                    edges = aiData.edges;
                } catch (err: any) {
                    console.error("AI roadmap generation error:", err);
                    setError({
                        title: "AI Generation Failed",
                        message: "We couldn't generate your roadmap using AI. Please try rephrasing your prompt or try again later.",
                        technicalDetails: err.message
                    });
                    sessionStorage.removeItem(sessionKey);
                    setIsGenerating(false);
                    return;
                }
            }

            // Fill nodes with descriptions
            const filledNodes: any[] = [];
            for (const node of nodes) {
                try {
                    const res = await fetch(`${import.meta.env.VITE_PYTHON_SERVER_URL}/gen-ai/api/description`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ label: node.data.label, context: prompt }),
                    });

                    if (!res.ok) {
                        console.warn(`Failed to fetch description for node: ${node.data.label}`);
                        filledNodes.push(node);
                        continue;
                    }

                    const data = await res.json();
                    filledNodes.push({
                        ...node,
                        data: {
                            ...node.data,
                            description: data.description || "",
                        },
                    });
                } catch (err) {
                    console.warn(`Error fetching description for node: ${node.data.label}`, err);
                    filledNodes.push(node);
                }
            }

            // Getting the Roadmap Difficulty generated by AI
            let finalDifficulty: string;
            try {
                const difficultyRes = await RoadmapService.getRoadmapDifficulty(filledNodes);

                if (difficultyRes.toLowerCase() !== "easy" &&
                    difficultyRes.toLowerCase() !== "medium" &&
                    difficultyRes.toLowerCase() !== "hard") {
                    finalDifficulty = "Medium";
                    console.log("Invalid difficulty received, defaulting to Medium");
                } else {
                    finalDifficulty = difficultyRes.charAt(0).toUpperCase() + difficultyRes.slice(1).toLowerCase();
                    console.log("Final Difficulty: ", finalDifficulty);
                }
            } catch (err) {
                console.warn("Failed to get difficulty, defaulting to Medium", err);
                finalDifficulty = "Medium";
            }

            // Getting the current user Id
            const userId = AuthService.getAuthenticatedUserId();

            const roadmap = {
                title: prompt,
                nodes: filledNodes,
                edges,
                createdAt: serverTimestamp(),
                userId: userId,
                visibility: "Public",
                difficulty: finalDifficulty
            };

            try {
                const docRef = await addDoc(collection(db, "roadmaps"), roadmap);
                sessionStorage.removeItem(sessionKey);
                navigate(`/user/roadmap/${docRef.id}`);
            } catch (err: any) {
                console.error("Firebase save error:", err);
                setError({
                    title: "Save Failed",
                    message: "Your roadmap was generated but we couldn't save it. Please check your connection and try again.",
                    technicalDetails: err.message
                });
                sessionStorage.removeItem(sessionKey);
                setIsGenerating(false);
            }
        } catch (err: any) {
            console.error("Unexpected roadmap generation error:", err);
            setError({
                title: "Generation Error",
                message: "An unexpected error occurred while generating your roadmap. Please try again.",
                technicalDetails: err.message
            });
            sessionStorage.removeItem(sessionKey);
            setIsGenerating(false);
        }
    };

    useEffect(() => {
        if (!prompt) {
            setError({
                title: "Missing Prompt",
                message: "No roadmap prompt was provided. Please go back and enter a valid prompt.",
            });
            setIsGenerating(false);
            return;
        }

        const sessionKey = `roadmap-generated-${prompt}`;

        if (sessionStorage.getItem(sessionKey)) {
            console.log("Duplicate prevention triggered - already generated.");
            return;
        }

        sessionStorage.setItem(sessionKey, "true");
        generateAndSaveRoadmap(sessionKey);
    }, [prompt]);

    const handleRetry = () => {
        const sessionKey = `roadmap-generated-${prompt}`;
        sessionStorage.removeItem(sessionKey);
        setError(null);
        setIsGenerating(true);
        generateAndSaveRoadmap(sessionKey);
    };

    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 p-4">
            {error ? (
                <Card className="w-full max-w-lg mx-auto p-8 shadow-lg border border-gray-200 bg-white">
                    <div className="flex flex-col items-center text-center">
                        <div className="w-16 h-16 bg-red-50 rounded-full flex items-center justify-center mb-6 ring-4 ring-red-100">
                            <AlertCircle className="w-8 h-8 text-red-600" />
                        </div>

                        <h2 className="text-2xl font-bold text-gray-900 mb-2">
                            {error.title}
                        </h2>

                        <p className="text-gray-600 mb-6 leading-relaxed">
                            {error.message}
                        </p>

                        {error.technicalDetails && (
                            <details className="w-full mb-6 text-left">
                                <summary className="text-sm text-gray-500 cursor-pointer hover:text-gray-700 transition-colors">
                                    Technical Details
                                </summary>
                                <div className="mt-2 p-3 bg-gray-50 rounded-md border border-gray-200">
                                    <code className="text-xs text-gray-700 break-all">
                                        {error.technicalDetails}
                                    </code>
                                </div>
                            </details>
                        )}

                        <div className="flex flex-col sm:flex-row gap-3 w-full">
                            <Button
                                onClick={() => navigate("/public/roadmaps")}
                                variant="outline"
                                className="flex-1 flex items-center justify-center gap-2 py-6 border-gray-300 hover:bg-gray-50 transition-colors"
                            >
                                <ArrowLeft className="w-4 h-4" />
                                Back to Roadmaps
                            </Button>

                            <Button
                                onClick={handleRetry}
                                className="flex-1 flex items-center justify-center gap-2 py-6 bg-gradient-to-r from-indigo-600 to-purple-600 text-white hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 shadow-md hover:shadow-lg"
                            >
                                <RefreshCw className="w-4 h-4" />
                                Try Again
                            </Button>
                        </div>
                    </div>
                </Card>
            ) : isGenerating ? (
                <Card className="w-full max-w-2xl mx-auto p-10 shadow-xl border border-gray-200 bg-white relative overflow-hidden">
                    {/* Animated background gradient */}
                    <div className="absolute inset-0 bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 opacity-50"></div>
                    <div className="absolute inset-0 bg-gradient-to-tr from-transparent via-white to-transparent animate-pulse"></div>

                    <div className="relative z-10 flex flex-col items-center gap-8">
                        {/* Enhanced spinner with multiple rings */}
                        <div className="relative">
                            <div className="w-24 h-24 border-4 border-indigo-100 rounded-full"></div>
                            <div className="w-24 h-24 border-4 border-indigo-600 border-t-transparent rounded-full animate-spin absolute top-0 left-0"></div>
                            <div className="w-20 h-20 border-4 border-purple-400 border-t-transparent rounded-full animate-spin absolute top-2 left-2" style={{ animationDuration: '1.5s' }}></div>
                            <div className="w-16 h-16 border-4 border-pink-300 border-t-transparent rounded-full animate-spin absolute top-4 left-4" style={{ animationDuration: '2s' }}></div>
                        </div>

                        <div className="text-center space-y-4">
                            <h3 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                                Crafting Your Learning Journey
                            </h3>
                            <p className="text-gray-600 max-w-md">
                                Our AI is analyzing your goals and building a personalized roadmap tailored just for you.
                            </p>
                        </div>

                        {/* Progress indicators */}
                        <div className="w-full max-w-md space-y-3">
                            <div className="flex items-center gap-3 text-sm">
                                <div className="w-2 h-2 bg-indigo-600 rounded-full animate-pulse"></div>
                                <span className="text-gray-700">Analyzing your prompt</span>
                            </div>
                            <div className="flex items-center gap-3 text-sm">
                                <div className="w-2 h-2 bg-purple-600 rounded-full animate-pulse" style={{ animationDelay: '0.3s' }}></div>
                                <span className="text-gray-700">Structuring learning path</span>
                            </div>
                            <div className="flex items-center gap-3 text-sm">
                                <div className="w-2 h-2 bg-pink-600 rounded-full animate-pulse" style={{ animationDelay: '0.6s' }}></div>
                                <span className="text-gray-700">Generating detailed descriptions</span>
                            </div>
                        </div>

                        {/* Fun fact or tip */}
                        <div className="w-full max-w-md p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg border border-indigo-100">
                            <p className="text-sm text-gray-700 text-center italic">
                                ðŸ’¡ <span className="font-medium">Pro Tip:</span> Consistent daily practice is more effective than marathon study sessions!
                            </p>
                        </div>

                        {/* Warning message */}
                        <p className="text-xs text-gray-500 text-center">
                            Please keep this page open while we generate your roadmap
                        </p>
                    </div>
                </Card>
            ) : null}
        </div>
    );
}